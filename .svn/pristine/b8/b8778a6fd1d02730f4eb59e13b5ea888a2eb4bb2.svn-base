package com.damenghai.chahuitong.ui.fragment;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Fragment;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;

import com.damenghai.chahuitong.R;
import com.damenghai.chahuitong.api.UserAPI;
import com.damenghai.chahuitong.config.SessionKeeper;
import com.damenghai.chahuitong.request.VolleyRequest;
import com.damenghai.chahuitong.response.JsonObjectListener;
import com.damenghai.chahuitong.utils.L;
import com.damenghai.chahuitong.utils.T;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.json.JSONException;
import org.json.JSONObject;

import cn.bmob.im.BmobUserManager;
import cn.bmob.im.bean.BmobChatUser;
import cn.bmob.v3.BmobInstallation;
import cn.bmob.v3.listener.SaveListener;

/**
 * Created by Sgun on 15/9/23.
 */
public class RegisterFragment extends Fragment implements OnClickListener, TextWatcher {
    private BmobUserManager mUserManager;
    private int mCode;
    private CountTimer mTimer;
    
    private View mView;
    private EditText mEtPassword;
    private Button mBtnRegister;
    private EditText mEtPhone;
    private EditText mEtCode;
    private Button mBtSend;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mUserManager = BmobUserManager.getInstance(getActivity());
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.fragment_register, null);
        
        initControl();
        
        initView();
        
        return mView;
    }

    public void initControl() {
        mEtPhone = (EditText) mView.findViewById(R.id.register_phone);
        mEtCode = (EditText) mView.findViewById(R.id.register_code);
        mEtPassword = (EditText) mView.findViewById(R.id.register_password);

        mBtSend = (Button) mView.findViewById(R.id.register_send);
        mBtnRegister = (Button) mView.findViewById(R.id.id_btn_register);
    }
    
    public void initView() {
        mBtSend.setOnClickListener(this);
        mBtnRegister.setOnClickListener(this);
        // 监听输入手机号码
        mEtPhone.addTextChangedListener(this);
    }

    private void getCode() {
        String mobile = mEtPhone.getText().toString();

        mCode = (int)((Math.random()*9+1)*100000);

        UserAPI.sendSMS(mobile, mCode, new VolleyRequest() {
            @Override
            public void onSuccess(String response) {
                super.onSuccess(response);

                try {
                    Document doc = DocumentHelper.parseText(response);
                    Element root = doc.getRootElement();

                    String code = root.elementText("code");
                    String msg = root.elementText("msg");

                    if (!"2".equals(code)) {
                        T.showShort(getActivity(), msg);
                    }

                } catch (DocumentException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @Override
    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

    }

    @SuppressLint("NewApi")
    @Override
    public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
        String phone = mEtPhone.getText().toString();
        if(phone.length() == 11) {
            UserAPI.isRegister(phone, new VolleyRequest() {
                @Override
                public void onSuccess(String response) {
                    super.onSuccess(response);
                    try {
                        JSONObject object = new JSONObject(response);
                        if(object.getInt("code") == 200) {
                            mBtSend.setBackgroundResource(R.color.primary_light);
                            mBtSend.setEnabled(false);
                            T.showLong(getActivity(), "号码已被注册!");
                        } else {
                            mBtSend.setBackground(getResources().getDrawable(R.drawable.draw_primary2dark_sel));
                            mBtSend.setEnabled(true);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }

            });

        }
    }

    @Override
    public void afterTextChanged(Editable editable) {

    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.register_send :
                if(mTimer == null) {
                    mTimer = new CountTimer(60000, 1000);
                }
                mTimer.start();
                mBtSend.setBackgroundResource(R.color.primary_light);
                getCode();
                break;
            case R.id.id_btn_register :
                register();
                break;
        }
    }

    private void register() {
        final String mobile = mEtPhone.getText().toString();
        final String password = mEtPassword.getText().toString();
        String code = mEtCode.getText().toString();

        if(TextUtils.isEmpty(mobile) || mobile.length() != 11) {
            T.showShort(getActivity(), "请填写正确的手机号码");
            return;
        }
        if(TextUtils.isEmpty(password)) {
            T.showShort(getActivity(), "请填写密码");
            return;
        }
        if(TextUtils.isEmpty(code)) {
            T.showShort(getActivity(), "请填写手机号后获取验证码");
            return;
        }

        if(!code.equals(mCode + "")) {
            T.showShort(getActivity(), "验证码错误");
            return;
        }

        final ProgressDialog progress = new ProgressDialog(getActivity());
        progress.setMessage("正在注册...");
        progress.setCanceledOnTouchOutside(false);
        progress.show();

        UserAPI.register(mobile, password, new VolleyRequest() {
            @Override
            public void onSuccess(String response) {
                super.onSuccess(response);
                try {
                    JSONObject obj = new JSONObject(response);
                    if (obj.getInt("code") == 200) {
                        SessionKeeper.writeSession(getActivity(), obj.getString("key"));
                        SessionKeeper.writeUsername(getActivity(), "username");

                        //由于每个应用的注册所需的资料都不一样，故IM sdk未提供注册方法，用户可按照bmod SDK的注册方式进行注册。
                        //注册的时候需要注意两点：1、User表中绑定设备id和type，2、设备表中绑定username字段
                        final BmobChatUser bu = new BmobChatUser();
                        bu.setMobilePhoneNumber(mobile);
                        bu.setUsername(mobile);
                        bu.setPassword(password);
                        //将user和设备id进行绑定aa
                        bu.setDeviceType("android");
                        bu.setInstallId(BmobInstallation.getInstallationId(getActivity()));
                        bu.signUp(getActivity(), new SaveListener() {

                            @Override
                            public void onSuccess() {
                                T.showShort(getActivity(), "注册成功");
                                // 将设备与username进行绑定
                                mUserManager.bindInstallationForRegister(bu.getUsername());
                                //更新地理位置信息
//                              updateUserLocation();
                            }

                            @Override
                            public void onFailure(int arg0, String arg1) {
                                L.d(arg0);
                                T.showShort(getActivity(), "注册失败:" + arg1);
                            }

                        });

                        progress.dismiss();
                        getActivity().setResult(Activity.RESULT_OK);
                        getActivity().finish();
                    } else {
                        T.showShort(getActivity(), obj.getString("content"));
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });

    }

    /* 定义一个倒计时的内部类 */
    class CountTimer extends CountDownTimer {
        public CountTimer(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);
        }

        @Override
        public void onTick(long l) {
            mBtSend.setEnabled(false);
            mBtSend.setText("(" + l/1000 + "秒)");
        }

        @Override
        public void onFinish() {
            mBtSend.setEnabled(true);
            mBtSend.setText("发送验证码");
        }
    }
}
